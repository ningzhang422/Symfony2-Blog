<?php

namespace Sdz\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
	public function myFindAll()
	{
		//$queryBuilder = $this->createQueryBuilder('a');	
		// Méthode équivalente, mais plus longue :
		//$queryBuilder = $this->_em->createQueryBuilder()
		//						  ->select('a')
		//						  ->from($this->_entityName, 'a');
		  // Dans un repository, $this->_entityName est le namespace de l'entité gérée
		  // Ici, il vaut donc Sdz\BlogBundle\Entity\Article
	 
		// On a fini de construire notre requête
	 
		// On récupère la Query à partir du QueryBuilder
		//$query = $queryBuilder->getQuery();
	 
		// On récupère les résultats à partir de la Query
		//$resultats = $query->getResult();
	 
		// On retourne ces résultats
		//return $resultats;
		return $this->createQueryBuilder('a')
              ->getQuery()
              ->getResult();
	}
	
	public function myFind()
	{
	  $qb = $this->createQueryBuilder('a');
	 
	  // On peut ajouter ce qu'on veut avant
	  $qb->where('a.auteur = :auteur')
		  ->setParameter('auteur', 'winzou');
	 
	  // On applique notre condition
	  $qb = $this->whereCurrentYear($qb);
	 
	  // On peut ajouter ce qu'on veut après
	  $qb->orderBy('a.date', 'DESC');
		 
	  return $qb->getQuery()
				->getResult();
	}
	
	public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb)
	{
	  $qb->andWhere('a.date BETWEEN :debut AND :fin')
		  ->setParameter('debut', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette année
		  ->setParameter('fin',   new \Datetime(date('Y').'-12-31')); // Et le 31 décembre de cette année
	 
		return $qb;
	}
	
	public function getAvecCategories(array $nom_categories)
	  {
		$qb = $this->createQueryBuilder('a');
	 
		// On fait une jointure avec l'entité Categorie, avec pour alias « c »
		$qb ->join('a.categories', 'c')
			->where($qb->expr()->in('c.nom', $nom_categories)); // Puis on filtre sur le nom des catégories à l'aide d'un IN
	 
		// Enfin, on retourne le résultat
		return $qb->getQuery()
				  ->getResult();
	  }
	  
	// On ajoute deux arguments : le nombre d'articles par page, ainsi que la page courante
  public function getArticles($nombreParPage, $page)
  {
    // On déplace la vérification du numéro de page dans cette méthode
    if ($page < 1) {
      throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
    }
 
    // La construction de la requête reste inchangée
    $query = $this->createQueryBuilder('a')
                  ->leftJoin('a.image', 'i')
                    ->addSelect('i')
                  ->leftJoin('a.categories', 'cat')
                    ->addSelect('cat')
                  ->orderBy('a.date', 'DESC')
                  ->getQuery();
 
    // On définit l'article à partir duquel commencer la liste
    $query->setFirstResult(($page-1) * $nombreParPage)
    // Ainsi que le nombre d'articles à afficher
          ->setMaxResults($nombreParPage);
		  
 
    // Enfin, on retourne l'objet Paginator correspondant à la requête construite
    // (n'oubliez pas le use correspondant en début de fichier)
    return new Paginator($query);
  }
  
  public function getArticlesByDate($date)
  {
	   $query = $this->createQueryBuilder('a')
	   				 ->Where('a.date >= :date_given')
		  			 ->setParameter('date_given', $date)  // Date entre le 1er janvier de cette année
		  			 ->getQuery()
		  			 ->getResult();
		return $query;
	   
  }
}
